#!/bin/bash

set -e
set -o pipefail

usage() {
  echo "Usage: git-autosave <command> [options]"
  echo ""
  echo "Common Commands:"
  echo "  init                Output ment to be eval'ed to initialize git-autosave"
  echo "  list                List all autosaved states"
  echo "  show <hash>         Show the diff of the given autosaved state and HEAD"
  echo "  restore <hash>      Resets HEAD to the given state"

  exit 1
}

init() {
  if [[ $SHELL = *zsh ]]; then
    echo 'precmd() { git-autosave precmd }'
  else
    echo 'export PROMPT_COMMAND="git-autosave precmd"'
  fi
}

precmd() {
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    exit 0
  fi

  if create_patch autosave --exit-code >/dev/null; then
    exit 0
  fi

  save_working_dir
}

save_working_dir() {
  local ref="refs/autosave"
  local tree_hash
  local parent
  local message
  local commit_hash

  if [ "$AUTOSAVE_DEBUG" ]; then
    echo "Autosave: Saving working dir"
  fi

  # Create tree
  tree_hash=$(write_tree ".")

  # Create commit
  parent=$(git show-ref --hash "$ref" || true)
  message="Autosave $(date)"
  commit_hash=$(commit_tree "$tree_hash" "$message" "$parent")

  # Create ref
  git update-ref "$ref" "$commit_hash"
}

list() {
  list_ | less
}

list_() {
  local hash
  local tmp_tree_hash
  local tmp_commit_hash

  # Create a temporary commit
  tmp_tree_hash=$(write_tree ".")
  tmp_commit_hash=$(commit_tree "$tmp_tree_hash" "Autosave temporary")

  while read -r hash; do
    git --no-pager show \
      --format="%C(yellow)commit %H%Creset%nDate: %ad%n" \
      --color=always \
      --no-patch "$hash"
    git diff --color=always "$tmp_commit_hash" "$hash"
    echo ""
  done < <(git rev-list autosave)
}

show() {
  local hash="$1"

  if [ ! "$hash" ]; then
    usage
  fi

  if ! is_valid_hash "$hash"; then
    echo "Error: Not a valid hash: $hash"
    exit 1
  fi

  create_patch "$hash"
}

restore() {
  local hash="$1"
  local patch

  if [ ! "$hash" ]; then
    usage
  fi

  if ! is_valid_hash "$hash"; then
    echo "Error: Not a valid hash: $hash"
    exit 1
  fi

  # Create patch
  patch=$(create_patch "$hash")

  # Apply patch
  echo "Applying patch..."
  echo "$patch"
  git apply <(echo "$patch")
}

create_patch() {
  local hash="$1"
  local tmp_tree_hash
  local tmp_commit_hash

  # Create a temporary commit
  tmp_tree_hash=$(write_tree ".")
  tmp_commit_hash=$(commit_tree "$tmp_tree_hash" "Autosave temporary")

  # Create patch
  git diff-tree -p "${@:2}" "$tmp_commit_hash" "$hash"
}

commit_tree() {
  local tree_hash="$1"
  local message="$2"
  local parent="$3"

  git commit-tree ${parent:+ -p "$parent"} -m "$message" "$tree_hash"
}

write_tree() {
  local dir="$1"
  local tree=""
  local filename
  local file
  local mode
  local hash

  for file in $dir/*; do
    filename=$(basename "$file")

    if [ -f "$file" ]; then
      hash=$(git hash-object -w -- "$file")
      mode="100$(get_file_mode "$file")"
      tree="${tree}${mode} blob $hash\t$filename\n"
    elif [ -d "$file" ]; then
      write_tree "$file" 1>/dev/null
    fi
  done

  printf "%b" "$tree" | git mktree
}

get_file_mode() {
  case $(uname -s) in
    Darwin)
      stat -f '%A' "$file"
      ;;
    *)
      stat -c '%A' "$file"
      ;;
  esac
}

is_valid_hash() {
  local hash="$1"

  [ "$(git rev-parse "$hash")" = "$hash" ]
}

if [ $# = 0 ]; then
  usage
fi

cmdname="$1"
shift

case "$cmdname" in
  init)
    init
    ;;
  list)
    list
    ;;
  show)
    show "$@"
    ;;
  restore)
    restore "$@"
    ;;
  precmd)
    precmd
    ;;
  save-working-dir)
    save_working_dir
    ;;
  *)
    usage
    ;;
esac
